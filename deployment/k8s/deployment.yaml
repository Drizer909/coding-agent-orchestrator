apiVersion: apps/v1
kind: Deployment
metadata:
  name: coding-orchestrator
  labels:
    app: coding-orchestrator
spec:
  replicas: 1
  selector:
    matchLabels:
      app: coding-orchestrator
  template:
    metadata:
      labels:
        app: coding-orchestrator
    spec:
      containers:
      - name: orchestrator
        image: coding-orchestrator:latest
        ports:
        - containerPort: 8001
        env:
        - name: JOBS_DIR
          value: "/app/jobs"
        - name: AGENT_IMAGE
          value: "agent-coding:latest"
        volumeMounts:
        - name: jobs-storage
          mountPath: /app/jobs
        - name: docker-sock
          mountPath: /var/run/docker.sock
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8001
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8001
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: jobs-storage
        persistentVolumeClaim:
          claimName: jobs-pvc
      - name: docker-sock
        hostPath:
          path: /var/run/docker.sock
          type: Socket
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
---
apiVersion: v1
kind: Service
metadata:
  name: coding-orchestrator-service
spec:
  selector:
    app: coding-orchestrator
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8001
  type: LoadBalancer
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jobs-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi 